---
openapi: "3.0.0"
info:
  version: "1.0.0"
  title: "Swagger Petstore"
  license:
    name: "MIT"
servers:
- url: "http://petstore.swagger.io/v1"
paths:
  /orders:
    get:
      summary: "List all Orders"
      operationId: "listOrders"
      tags:
      - "orders"
      parameters:
      - name: "limit"
        in: "query"
        description: "How many items to return at one time (max 100)"
        required: false
        schema:
          type: "integer"
          format: "int32"
      security:
      - petstore_auth:
        - "read:pets"
      responses:
        "200":
          description: "An paged array of pets"
          headers:
            x-next:
              description: "A link to the next page of responses"
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Order"
              example:
              - id: 1
                petId: 1111
                quantity: 1
                shipDate: "11/11/2021"
                status : "ok"
              - id: 2
                petId: 2222
                quantity: 2
                shipDate: "11/11/2022"
                status: "ok"
        default:
          description: "unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /order:
    post:
      summary: "Create a order"
      operationId: "createOrder"
      requestBody:
        description: "Order to add to the store"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
      tags:
        - "order"
      security:
        - petstore_auth:
            - "read:order"
            - "write:order"
      responses:
        "201":
          description: "Null response"
        default:
          description: "unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /order/{orderId}:
    get:
      summary: "Info for a specific pet"
      operationId: "showOrderById"
      tags:
      - "order"
      parameters:
      - name: "orderId"
        in: "path"
        required: true
        description: "The id of the pet to retrieve"
        schema:
          type: "string"
      security:
      - petstore_auth:
        - "read:pet"
      responses:
        "200":
          description: "Expected response to a valid request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Oder"
              example:
                id: 1
                name: "Jessica Right"
                tag: "pet"
        default:
          description: "unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: "Delete a specific pet"
      operationId: "deleteOderById"
      tags:
      - "order"
      parameters:
      - name: "orderId"
        in: "path"
        required: true
        description: "The id of the pet to delete"
        schema:
          type: "string"
      - name: "key"
        in: "header"
        required: true
        description: "The key header"
        schema:
          type: "string"
      security:
      - petstore_auth:
        - "write:pets"
      responses:
        "200":
          description: "Expected response to a valid request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
              examples:
                response:
                  value:
                    id: 1
                    name: "Jessica Right"
                    tag: "pet"
        default:
          description: "unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  securitySchemes:
    petstore_auth:
      type: "oauth2"
      description: "This API uses OAuth 2 with the client credential grant flow."
      flows:
        clientCredentials:
          tokenUrl: "https://localhost:6882/token"
          scopes:
            write:pets: "modify pets in your account"
            read:pets: "read your order"
  schemas:
    Order:
      type: "object"
      required:
      - "id"
      - "petId"
      - "quantity"
      - "shipDate"
      - "status"
      properties:
        id:
          type: "integer"
          format: "int64"
        petId:
          type: "integer"
          format: "int64"
        quantity:
          type: "integer"
          format: "int64"
        shipDate:
          type : "string"
          format: "date"
    Error:
      type: "object"
      required:
      - "code"
      - "message"
      properties:
        code:
          type: "integer"
          format: "int32"
        message:
          type: "string"
